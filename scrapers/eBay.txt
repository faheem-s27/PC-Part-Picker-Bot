import requests
from bs4 import BeautifulSoup

def extract_price_from_element(price_element):
    """Extracts the price or price range from the price element."""
    prices = []
    for item in price_element.strings:
        stripped_item = item.strip()
        if stripped_item:  # Exclude empty strings
            prices.append(stripped_item)
    # If there's only one price, return it. Otherwise, return the first and last prices for the range.
    if len(prices) == 1:
        return prices[0]
    elif len(prices) > 1:
        return f"{prices[0]} to {prices[-1]}"
    else:
        return None

def scrape_ebay_price(product):
    search_url = f"https://www.ebay.co.uk/sch/164/i.html?_nkw={product.replace(' ', '+')}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',
    }
    response = requests.get(search_url, headers=headers)
    if response.status_code == 200:
        # Print the URL of the eBay search page
        print("eBay search page URL:", search_url)
        soup = BeautifulSoup(response.content, 'html.parser')
        # Find all price elements on the search page
        price_elements = soup.find_all('span', class_='s-item__price')
        # Check if at least two price elements are found
        if len(price_elements) >= 2:
            # Retrieve the second price element
            second_price_element = price_elements[1]
            # Extract the price from the second price element
            price = extract_price_from_element(second_price_element)
            return f'The price of {product} on ebay.co.uk is {price}'
        else:
            return 'Price not found.'
    else:
        return 'Failed to fetch data from eBay.'

# Example usage: Intel Core i7-950, Intel Core i5-8500T, Intel Core i5-2500, AMD Ryzen 7 5800X
product = "Intel Core i7-950"
print(scrape_ebay_price(product))
